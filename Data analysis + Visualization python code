#inputing and declaring the source URL for seamless dataset retrieval 
URL = 'https://openafrica.net/dataset/historic-and-projected-rainfall-and-runoff-for-4-lake-victoria-sub-regions'

# Importing all required libraries for analysis and data exploration
#importing all libraries to utilize in our analysis
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from matplotlib import rcParams
import scipy.stats  as stats
import pandas_profiling
%matplotlib inline

# Reading in datasets for analysis
#Ensuring the datasets are indexed by the time column for easier analysis

df1 = pd.read_csv('kagera-sub-region-historic-and-projected-rainfall.csv', index_col='Time')
df2 = pd.read_csv('lake-victoria-sub-region-historic-and-projected-rainfall.csv',index_col='Time')
df3 = pd.read_csv('simiyu-sub-region-historic-and-projected-rainfall.csv',index_col='Time')
df4 = pd.read_csv('victoria-nile-sub-region-historic-and-projected-rainfall.csv',index_col='Time') #needs all columns renamed & columns transformed from objects to floats variables 
df5 = pd.read_csv('runoff-kagera-sub-region-historic-and-projected.csv',index_col='Time')
df6 = pd.read_csv('runoff-lake-victoria-sub-region-historic-and-projected.csv',index_col='Time') #needs Avg Min and Max renamed
df7 = pd.read_csv('runoff-simiyu-sub-region-historic-and-projected.csv', index_col='Time')
df8 = pd.read_csv('runoff-victoria-nile-sub-region-historic-and-projected.csv', index_col='Time')

#Data exploration
#df1.head() to explore the datasets, columns and alignment
#change the df1 to df2, df3, df4, df5, df6, df7, and df8 to explore the dataset
df1.tail()

#using the dtypes() method to display the different datatypes available
df1.dtypes

# Checking for missing values in the columns and any inconsistencies
df1.isnull().any() 

# Checking for the sum of missing values in the columns ~ only one in the entire column across the datasets
df1.isnull().sum() 

#Data Cleaning for Dataset 4 - "victoria-nile-sub-region-historic-and-projected-rainfall.csv"
    The dataset needs first row to be converted to column name & columns transformed from objects to floats variables 


#Converting first row to main column names for df4
df4.columns = df4.iloc[0]

#Develeting the first row - due to duplication
df4 = df4.iloc[1:]

#Indexing the first column
df4.set_index(df4.columns[0])

#Converting the Columns from objects to float variables for easy analysis
df4 = df4.astype({'Time': 'float', 'Jan.': 'float', 'Feb.': 'float', 'March': 'float', 'April': 'float', 'May': 'float', 'June': 'float', 'July': 'float', 
                  'Aug.': 'float', 'Sept.': 'float', 'Oct.': 'float', 'Nov.': 'float', 'Dec.': 'float', 'Avg.': 'float', 'Min.': 'float', 'Max.': 'float'})
                  
#Data exploration of df4 to confirm its cleaned and ready for analysis and visualization 
df4.dtypes
df4.head()

# Data Cleaning for Dataset 6 - "runoff-lake-victoria-sub-region-historic-and-projected.csv"
#The dataset needs needs Avg Min and Max renamed
#Rename the Avg Min and Max columns of dataset 6
df6.rename(columns = {'Time':'Time', 'Jan.':'Jan.', 'Feb.' : 'Feb.' ,'March' : 'March', 'April' : 'April', 'May' : 'May', 'June' : 'June', 'July': 'July', 'Aug.': 'Aug.', 
                     'Sept.' : 'Sept.', 'Oct.' : 'Oct.', 'Nov.' : 'Nov.', 'Dec.' : 'Dec.','Unnamed: 13' : 'Avg', 'Unnamed: 14' : 'Min', 'Unnamed: 15' : 'Max'},inplace = True)
#Exploring dataset 6
df6.head()

# Conducting simple visualization to assess if dataset is ready for analysis
# Scatter plot of Average rainfall between 2000-2035 in victoria-nile-sub-region
%matplotlib inline
sns.scatterplot(x="Time", y='Avg.', data=df4)

df1.plot()
df2.plot()
df3.plot()
df5.plot()
df6.plot()
df7.plot()
df8.plot()

# Scatter plot of Average rainfall between 2000-2035 in victoria-nile-sub-region
%matplotlib inline
sns.scatterplot(x='Min.', y='Max.', data=df8)

# Creating Pandas Profiling Visualizations to:  
    1. Explore the datasets.
    2. Analyse the datasets.
    3. To story tell. 
    
#Creating a profiling report - for df1 - kagera-sub-region-historic-and-projected-rainfall
profile1 = pandas_profiling.ProfileReport(df1)

#exporting the report into html report. 
profile1.to_file(outputfile="kagera report.html")

#repeat for all the datasets df1-df8

#       ~   E N D OF OUR CODE AND ANALYSIS  ~

